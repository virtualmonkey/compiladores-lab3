# Generated from YAPL.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,370,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
        8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
        13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,
        16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
        22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,
        30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,
        34,5,34,254,8,34,10,34,12,34,257,9,34,1,34,1,34,1,35,4,35,262,8,
        35,11,35,12,35,263,1,36,1,36,5,36,268,8,36,10,36,12,36,271,9,36,
        1,37,1,37,5,37,275,8,37,10,37,12,37,278,9,37,1,38,1,38,1,38,1,39,
        1,39,1,39,1,39,5,39,287,8,39,10,39,12,39,290,9,39,1,39,3,39,293,
        8,39,1,39,1,39,1,40,1,40,1,40,1,40,5,40,301,8,40,10,40,12,40,304,
        9,40,1,40,1,40,1,40,1,40,1,40,1,41,4,41,312,8,41,11,41,12,41,313,
        1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,
        1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,
        1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,
        1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,
        1,64,3,64,369,8,64,1,302,0,65,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
        83,42,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,0,105,0,
        107,0,109,0,111,0,113,0,115,0,117,0,119,0,121,0,123,0,125,0,127,
        0,129,0,1,0,29,2,0,34,34,92,92,1,0,48,57,1,0,65,90,4,0,48,57,65,
        90,95,95,97,122,1,0,97,122,1,0,10,10,3,0,9,10,12,13,32,32,2,0,65,
        65,97,97,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,
        70,70,102,102,2,0,72,72,104,104,2,0,73,73,105,105,2,0,76,76,108,
        108,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,2,0,82,
        82,114,114,2,0,83,83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,
        2,0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,
        121,121,2,0,90,90,122,122,3,0,48,57,65,70,97,102,8,0,34,34,47,47,
        92,92,98,98,102,102,110,110,114,114,116,116,356,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
        0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
        0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,
        0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
        0,0,0,1,131,1,0,0,0,3,133,1,0,0,0,5,135,1,0,0,0,7,137,1,0,0,0,9,
        139,1,0,0,0,11,141,1,0,0,0,13,143,1,0,0,0,15,145,1,0,0,0,17,147,
        1,0,0,0,19,149,1,0,0,0,21,153,1,0,0,0,23,155,1,0,0,0,25,161,1,0,
        0,0,27,170,1,0,0,0,29,175,1,0,0,0,31,181,1,0,0,0,33,184,1,0,0,0,
        35,189,1,0,0,0,37,194,1,0,0,0,39,197,1,0,0,0,41,203,1,0,0,0,43,208,
        1,0,0,0,45,213,1,0,0,0,47,217,1,0,0,0,49,220,1,0,0,0,51,224,1,0,
        0,0,53,231,1,0,0,0,55,233,1,0,0,0,57,235,1,0,0,0,59,237,1,0,0,0,
        61,239,1,0,0,0,63,241,1,0,0,0,65,244,1,0,0,0,67,246,1,0,0,0,69,250,
        1,0,0,0,71,261,1,0,0,0,73,265,1,0,0,0,75,272,1,0,0,0,77,279,1,0,
        0,0,79,282,1,0,0,0,81,296,1,0,0,0,83,311,1,0,0,0,85,317,1,0,0,0,
        87,319,1,0,0,0,89,321,1,0,0,0,91,323,1,0,0,0,93,325,1,0,0,0,95,327,
        1,0,0,0,97,329,1,0,0,0,99,331,1,0,0,0,101,333,1,0,0,0,103,335,1,
        0,0,0,105,337,1,0,0,0,107,339,1,0,0,0,109,341,1,0,0,0,111,343,1,
        0,0,0,113,345,1,0,0,0,115,347,1,0,0,0,117,349,1,0,0,0,119,351,1,
        0,0,0,121,353,1,0,0,0,123,355,1,0,0,0,125,357,1,0,0,0,127,359,1,
        0,0,0,129,365,1,0,0,0,131,132,5,59,0,0,132,2,1,0,0,0,133,134,5,123,
        0,0,134,4,1,0,0,0,135,136,5,125,0,0,136,6,1,0,0,0,137,138,5,40,0,
        0,138,8,1,0,0,0,139,140,5,44,0,0,140,10,1,0,0,0,141,142,5,41,0,0,
        142,12,1,0,0,0,143,144,5,58,0,0,144,14,1,0,0,0,145,146,5,64,0,0,
        146,16,1,0,0,0,147,148,5,46,0,0,148,18,1,0,0,0,149,150,5,108,0,0,
        150,151,5,101,0,0,151,152,5,116,0,0,152,20,1,0,0,0,153,154,5,126,
        0,0,154,22,1,0,0,0,155,156,3,87,43,0,156,157,3,99,49,0,157,158,3,
        85,42,0,158,159,3,109,54,0,159,160,3,109,54,0,160,24,1,0,0,0,161,
        162,3,97,48,0,162,163,3,101,50,0,163,164,3,95,47,0,164,165,3,91,
        45,0,165,166,3,107,53,0,166,167,3,97,48,0,167,168,3,111,55,0,168,
        169,3,109,54,0,169,26,1,0,0,0,170,171,5,116,0,0,171,172,5,114,0,
        0,172,173,5,117,0,0,173,174,5,101,0,0,174,28,1,0,0,0,175,176,5,102,
        0,0,176,177,5,97,0,0,177,178,5,108,0,0,178,179,5,115,0,0,179,180,
        5,101,0,0,180,30,1,0,0,0,181,182,3,97,48,0,182,183,3,93,46,0,183,
        32,1,0,0,0,184,185,3,91,45,0,185,186,3,99,49,0,186,187,3,109,54,
        0,187,188,3,91,45,0,188,34,1,0,0,0,189,190,3,111,55,0,190,191,3,
        95,47,0,191,192,3,91,45,0,192,193,3,101,50,0,193,36,1,0,0,0,194,
        195,3,93,46,0,195,196,3,97,48,0,196,38,1,0,0,0,197,198,3,117,58,
        0,198,199,3,95,47,0,199,200,3,97,48,0,200,201,3,99,49,0,201,202,
        3,91,45,0,202,40,1,0,0,0,203,204,3,99,49,0,204,205,3,103,51,0,205,
        206,3,103,51,0,206,207,3,105,52,0,207,42,1,0,0,0,208,209,3,105,52,
        0,209,210,3,103,51,0,210,211,3,103,51,0,211,212,3,99,49,0,212,44,
        1,0,0,0,213,214,3,99,49,0,214,215,3,91,45,0,215,216,3,111,55,0,216,
        46,1,0,0,0,217,218,3,97,48,0,218,219,3,101,50,0,219,48,1,0,0,0,220,
        221,3,101,50,0,221,222,3,91,45,0,222,223,3,117,58,0,223,50,1,0,0,
        0,224,225,3,97,48,0,225,226,3,109,54,0,226,227,3,115,57,0,227,228,
        3,103,51,0,228,229,3,97,48,0,229,230,3,89,44,0,230,52,1,0,0,0,231,
        232,5,43,0,0,232,54,1,0,0,0,233,234,5,45,0,0,234,56,1,0,0,0,235,
        236,5,42,0,0,236,58,1,0,0,0,237,238,5,47,0,0,238,60,1,0,0,0,239,
        240,5,60,0,0,240,62,1,0,0,0,241,242,5,60,0,0,242,243,5,61,0,0,243,
        64,1,0,0,0,244,245,5,61,0,0,245,66,1,0,0,0,246,247,3,101,50,0,247,
        248,3,103,51,0,248,249,3,111,55,0,249,68,1,0,0,0,250,255,5,34,0,
        0,251,254,3,129,64,0,252,254,8,0,0,0,253,251,1,0,0,0,253,252,1,0,
        0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,258,1,0,
        0,0,257,255,1,0,0,0,258,259,5,34,0,0,259,70,1,0,0,0,260,262,7,1,
        0,0,261,260,1,0,0,0,262,263,1,0,0,0,263,261,1,0,0,0,263,264,1,0,
        0,0,264,72,1,0,0,0,265,269,7,2,0,0,266,268,7,3,0,0,267,266,1,0,0,
        0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,74,1,0,0,0,
        271,269,1,0,0,0,272,276,7,4,0,0,273,275,7,3,0,0,274,273,1,0,0,0,
        275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,76,1,0,0,0,278,
        276,1,0,0,0,279,280,5,60,0,0,280,281,5,45,0,0,281,78,1,0,0,0,282,
        283,5,45,0,0,283,284,5,45,0,0,284,288,1,0,0,0,285,287,8,5,0,0,286,
        285,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,
        292,1,0,0,0,290,288,1,0,0,0,291,293,5,10,0,0,292,291,1,0,0,0,292,
        293,1,0,0,0,293,294,1,0,0,0,294,295,6,39,0,0,295,80,1,0,0,0,296,
        297,5,45,0,0,297,298,5,42,0,0,298,302,1,0,0,0,299,301,9,0,0,0,300,
        299,1,0,0,0,301,304,1,0,0,0,302,303,1,0,0,0,302,300,1,0,0,0,303,
        305,1,0,0,0,304,302,1,0,0,0,305,306,5,42,0,0,306,307,5,45,0,0,307,
        308,1,0,0,0,308,309,6,40,0,0,309,82,1,0,0,0,310,312,7,6,0,0,311,
        310,1,0,0,0,312,313,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,
        315,1,0,0,0,315,316,6,41,0,0,316,84,1,0,0,0,317,318,7,7,0,0,318,
        86,1,0,0,0,319,320,7,8,0,0,320,88,1,0,0,0,321,322,7,9,0,0,322,90,
        1,0,0,0,323,324,7,10,0,0,324,92,1,0,0,0,325,326,7,11,0,0,326,94,
        1,0,0,0,327,328,7,12,0,0,328,96,1,0,0,0,329,330,7,13,0,0,330,98,
        1,0,0,0,331,332,7,14,0,0,332,100,1,0,0,0,333,334,7,15,0,0,334,102,
        1,0,0,0,335,336,7,16,0,0,336,104,1,0,0,0,337,338,7,17,0,0,338,106,
        1,0,0,0,339,340,7,18,0,0,340,108,1,0,0,0,341,342,7,19,0,0,342,110,
        1,0,0,0,343,344,7,20,0,0,344,112,1,0,0,0,345,346,7,21,0,0,346,114,
        1,0,0,0,347,348,7,22,0,0,348,116,1,0,0,0,349,350,7,23,0,0,350,118,
        1,0,0,0,351,352,7,24,0,0,352,120,1,0,0,0,353,354,7,25,0,0,354,122,
        1,0,0,0,355,356,7,26,0,0,356,124,1,0,0,0,357,358,7,27,0,0,358,126,
        1,0,0,0,359,360,5,117,0,0,360,361,3,125,62,0,361,362,3,125,62,0,
        362,363,3,125,62,0,363,364,3,125,62,0,364,128,1,0,0,0,365,368,5,
        92,0,0,366,369,7,28,0,0,367,369,3,127,63,0,368,366,1,0,0,0,368,367,
        1,0,0,0,369,130,1,0,0,0,11,0,253,255,263,269,276,288,292,302,313,
        368,1,6,0,0
    ]

class YAPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    CLASS = 12
    INHERITS = 13
    TRUE = 14
    FALSE = 15
    IF = 16
    ELSE = 17
    THEN = 18
    FI = 19
    WHILE = 20
    LOOP = 21
    POOL = 22
    LET = 23
    IN = 24
    NEW = 25
    ISVOID = 26
    ADD = 27
    MINUS = 28
    MULT = 29
    DIV = 30
    LT = 31
    LE = 32
    EQ = 33
    NOT = 34
    STRINGS = 35
    INTEGERS = 36
    TYPE = 37
    ID = 38
    ASIGNOPP = 39
    ONE_LINE_COMMENT = 40
    MULTILINE_COMMENT = 41
    WHITESPACE = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'{'", "'}'", "'('", "','", "')'", "':'", "'@'", "'.'", 
            "'let'", "'~'", "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", 
            "'<'", "'<='", "'='", "'<-'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "INHERITS", "TRUE", "FALSE", "IF", "ELSE", "THEN", 
            "FI", "WHILE", "LOOP", "POOL", "LET", "IN", "NEW", "ISVOID", 
            "ADD", "MINUS", "MULT", "DIV", "LT", "LE", "EQ", "NOT", "STRINGS", 
            "INTEGERS", "TYPE", "ID", "ASIGNOPP", "ONE_LINE_COMMENT", "MULTILINE_COMMENT", 
            "WHITESPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "CLASS", "INHERITS", 
                  "TRUE", "FALSE", "IF", "ELSE", "THEN", "FI", "WHILE", 
                  "LOOP", "POOL", "LET", "IN", "NEW", "ISVOID", "ADD", "MINUS", 
                  "MULT", "DIV", "LT", "LE", "EQ", "NOT", "STRINGS", "INTEGERS", 
                  "TYPE", "ID", "ASIGNOPP", "ONE_LINE_COMMENT", "MULTILINE_COMMENT", 
                  "WHITESPACE", "A", "C", "D", "E", "F", "H", "I", "L", 
                  "N", "O", "P", "R", "S", "T", "U", "V", "W", "X", "Y", 
                  "Z", "HEX", "UNICODE", "ESC" ]

    grammarFileName = "YAPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


